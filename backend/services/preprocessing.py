from fastapi import HTTPException
# from text_to_mcq import TextToMCQ  # Import the text_to_mcq.py class
# from mcq_txt_to_json import MCQTextToJSON  # Import the mcq_txt_to_json.py class
# from pdf_to_text import save_combined_text_from_pdfs  # Assuming this function is already available

from services.text_to_mcq import TextToMCQ
from services.mcq_txt_to_json import MCQTextToJSON
from services.pdf_to_text import save_combined_text_from_pdfs


class PreprocessingPipeline:
    """Class to manage the preprocessing pipeline of PDF to MCQs."""
    
    def __init__(self, upload_folder="upload", output_folder="output"):
        self.upload_folder = upload_folder
        self.output_folder = output_folder

    def extract_and_generate_mcqs(self, num_questions=10):
        """Full pipeline: PDF -> Text -> MCQs -> JSON."""
        
        # Step 1: Extract text from PDFs
        try:
            save_combined_text_from_pdfs(upload_folder=self.upload_folder, output_file=f"{self.output_folder}/combined_output.txt")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Error extracting text from PDFs: {str(e)}")
        
        # Step 2: Generate MCQs from the extracted text
        try:
            # Read the combined text file generated by pdf_to_text.py
            txt_file = f"{self.output_folder}/combined_output.txt"
            with open(txt_file, "r", encoding="utf-8") as f:
                extracted_text = f.read()

            # Create an instance of TextToMCQ and run the process
            text_to_mcq_processor = TextToMCQ(extracted_text, output_folder=self.output_folder)
            text_to_mcq_processor.process(num_questions=num_questions)  # Generate MCQs

        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Error generating MCQs: {str(e)}")

        # Step 3: Convert raw MCQs to JSON
        try:
            raw_mcq_file = f"{self.output_folder}/mcqs_raw.txt"
            mcq_json_processor = MCQTextToJSON(raw_mcq_file, output_folder=self.output_folder)
            mcq_json_processor.process()  # Convert raw MCQs to JSON

        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Error converting MCQs to JSON: {str(e)}")

        return {"message": "MCQs generation complete", "output_file": f"{self.output_folder}/mcqs.json"}


# Utility function to run preprocessing from outside (like from an API endpoint)
def generate_mcqs_pipeline():
    """Function to start the entire MCQs generation pipeline."""
    pipeline = PreprocessingPipeline(upload_folder="upload", output_folder="output")
    result = pipeline.extract_and_generate_mcqs(num_questions=10)  # You can adjust num_questions here
    return result
